---
import style from "../../styles/scrollSection.module.css";
import animated from "../../styles/fadeAnimations.module.css";
import Image from "astro/components/Image.astro";
import LucideMouse from "../../assets/icons/lucide/LucideMouse.astro";
import LucideChevronDown from "../../assets/icons/lucide/LucideChevronDown.astro";
---

<div
  class={`text-center ${animated.fadeInUp} flex flex-col items-center gap-5`}
>
  <h2 class="text-gray-600 max-w-3xl mx-auto text-2xl md:text-3xl">
    Conoce a nuestro amigable asistente que te acompañará en la gestión de tus
    cafeterías.
  </h2>
  <p class="text-4xl md:text-5xl font-bold mb-4 text-black">Conoce a ...</p>
</div>
<section class={`text-black overflow-x-hidden relative`}>
  <section id="hero" class={`${style.hero}`}>
    <div id="hero_img_container" class={`${style.hero_img_container}`}>
      <Image
        src="/mikhuy_extended_bg.webp"
        alt="mikhuy background"
        title="Mikhuy Background"
        width={1920}
        height={1080}
        loading={"lazy"}
      />

      <div id="hero_img_logo" class={`${style.hero_img_logo}`}>
        <!-- <img src="/mikhuy_text.svg" alt="logo web" /> -->
      </div>

      <!-- <img src="/mikhuy_no_bg.png" alt="gta vi no bg" /> -->
      <div id="hero_img_copy" class={`${style.hero_img_copy}`}>
        <span class="animate-bounce"
          ><LucideMouse />
          <LucideChevronDown />
        </span>
      </div>
    </div>
    <div id="fade_overlay" class={`${style.fade_overlay}`}></div>

    <div id="overlay" class={`${style.overlay}`}>
      <svg width="100%" height="100%">
        <defs>
          <mask id="logoRevealMask">
            <rect width="100%" height="100%" fill="white"></rect>
            <path id="logoMask"></path>
          </mask>
        </defs>
        <rect
          width="100%"
          height="100%"
          fill="#ffffff"
          mask="url(#logoRevealMask)"></rect>
      </svg>
    </div>
    <div id="logo_container" class={`${style.logo_container}`}></div>

    <div id="overlay_copy" class={`${style.overlay_copy}`}>
      <h2 id="h1Text">
        Transforma <br />
        Tu <br />
        Cafetín <br />
      </h2>
      <span
        class="w-full flex items-center justify-center mt-4 text-4xl animate-bounce"
      >
        <LucideChevronDown />
      </span>
    </div>
  </section>
</section>

<script>
  import { mikhuyTextSvg } from "../../assets/logo/mikhuyTextSvg";
  import gsap from "gsap";
  import ScrollTrigger from "gsap/ScrollTrigger";

  if (typeof window !== "undefined") {
    gsap.registerPlugin(ScrollTrigger);
    gsap.ticker.lagSmoothing(0);
  }

  document.addEventListener("DOMContentLoaded", () => {
    const initialOverlayScale = 350;

    const heroImgContainer = document.getElementById(
      "hero_img_container"
    ) as HTMLElement | null;
    const heroImgLogo = document.getElementById(
      "hero_img_logo"
    ) as HTMLElement | null;
    const heroImgCopy = document.getElementById(
      "hero_img_copy"
    ) as HTMLElement | null;
    const fadeOverlay = document.getElementById(
      "fade_overlay"
    ) as HTMLElement | null;
    const overlay = document.getElementById("overlay") as HTMLElement | null;
    const overlay_copy = document.getElementById(
      "overlay_copy"
    ) as HTMLElement | null;
    const h1Text = document.getElementById("h1Text") as HTMLElement | null;
    const logoContainer = document.getElementById(
      "logo_container"
    ) as HTMLElement | null;
    const logoMask = document.getElementById(
      "logoMask"
    ) as SVGPathElement | null;

    // Verificación de existencia
    if (
      !heroImgContainer ||
      !heroImgLogo ||
      !heroImgCopy ||
      !fadeOverlay ||
      !overlay ||
      !overlay_copy ||
      !h1Text ||
      !logoContainer ||
      !logoMask
    ) {
      console.warn(
        "Uno o más elementos requeridos no se encontraron en el DOM."
      );
      return;
    }

    logoMask.setAttribute("d", mikhuyTextSvg);

    const logoDimensions = logoContainer.getBoundingClientRect();
    const logoBoundingBox = logoMask.getBBox();
    let horizontalOffset = 5;

    if (window.innerWidth <= 768) {
      horizontalOffset = 0; // para móviles
    } else if (window.innerWidth <= 1024) {
      horizontalOffset = 3; // tablets
    } else {
      horizontalOffset = 5; // desktop
    }

    const horizontalScaleRatio = logoDimensions.width / logoBoundingBox.width;
    const verticalScaleRatio = logoDimensions.height / logoBoundingBox.height;

    const logoScaleFactor = Math.min(horizontalScaleRatio, verticalScaleRatio);

    const logoHorizontalPosition =
      logoDimensions.left +
      (logoDimensions.width - logoBoundingBox.width * logoScaleFactor) +
      horizontalOffset;

    const logoVerticalPosition =
      logoDimensions.top +
      (logoDimensions.height - logoBoundingBox.height * logoScaleFactor) / 1.3 -
      logoBoundingBox.y * logoScaleFactor;

    logoMask.setAttribute(
      "transform",
      `translate(${logoHorizontalPosition}, ${logoVerticalPosition}) scale(${logoScaleFactor})`
    );

    ScrollTrigger.create({
      trigger: "#hero",
      start: "top top",
      end: `${window.innerHeight * 5}px`,
      pin: true,
      pinSpacing: true,
      scrub: 1,
      onUpdate: (self) => {
        const scrollProgress = self.progress;
        const fadeOpacity = 1 - scrollProgress * (1 / 1);

        if (scrollProgress <= 0.15) {
          gsap.set([heroImgLogo, heroImgCopy], {
            opacity: fadeOpacity,
          });
        } else {
          gsap.set([heroImgLogo, heroImgCopy], {
            opacity: 0,
          });
        }

        if (scrollProgress <= 0.85) {
          const normalizedProgress = scrollProgress * (1 / 0.85);
          const heroImgContainerScale = 1.2 - 0.5 * normalizedProgress;
          const overlayScale =
            initialOverlayScale *
            Math.pow(1 / initialOverlayScale, normalizedProgress);

          let fadeOverlayOpacity = 0;

          gsap.set(heroImgContainer, {
            scale: heroImgContainerScale,
          });

          gsap.set(overlay, {
            scale: overlayScale,
          });

          if (scrollProgress >= 0.25) {
            fadeOverlayOpacity = Math.min(
              1,
              (scrollProgress - 0.25) * (1 / 0.4)
            );
          }

          gsap.set(fadeOverlay, {
            opacity: fadeOverlayOpacity,
          });
        }

        if (scrollProgress >= 0.6 && scrollProgress <= 0.85) {
          const overlayCopyRevealProgress = (scrollProgress - 0.6) * (1 / 0.25);

          const gradientSpread = 100;
          const gradientBottomPosition = 240 - overlayCopyRevealProgress * 280;
          const gradientTopPosition = gradientBottomPosition - gradientSpread;
          const overlayCopyScale = 1.25 - 0.25 * overlayCopyRevealProgress;

          overlay_copy.style.background = `linear-gradient(to bottom, #ffffff 0%, #ffffff ${gradientTopPosition}%, #FCB066 ${gradientBottomPosition}%, #FCB066 100%)`;
          overlay_copy.style.backgroundClip = "text";

          gsap.set(overlay_copy, {
            scale: overlayCopyScale,
            opacity: overlayCopyRevealProgress,
          });
        } else if (scrollProgress < 0.6) {
          gsap.set(overlay_copy, {
            opacity: 0,
          });
        }
      },
    });
  });
</script>
